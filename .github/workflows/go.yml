# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  linux-windows-build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24.0'

    - name: Set up libusb
      run: sudo apt-get install libusb-1.0-0-dev

    - name: Build
      run: go build -C src && GOOS=windows GOARCH=amd64 go build -C src

    
    - name: Save linux artifact
      uses: actions/upload-artifact@v4
      with:
        name: linux-build
        path: |
          src/lapki-flasher

    - name: Save windows artifact
      uses: actions/upload-artifact@v4
      with:
        name: windows-build
        path: |
          src/lapki-flasher.exe

  mac-build:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24.0'

    - name: Build arm64
      run: CGO_ENABLED=1 GOOS=darwin GOARCH=arm64 go build -C src -o flasher_arm64
    - name: Build amd64
      run: CGO_ENABLED=1 GOOS=darwin GOARCH=amd64 go build -C src -o flasher_amd64  
    - name: Build universal
      run: lipo -create -output lapki-flasher flasher_arm64 flasher_amd64

    - name: Save mac universal artifact
      uses: actions/upload-artifact@v4
      with:
        name: mac-build
        path: |
          src/lapki-flasher

    - name: Save mac arm64 artifact
      uses: actions/upload-artifact@v4
      with:
        name: mac-build
        path: |
          src/lapki-arm64

    - name: Save mac amd64 artifact
      uses: actions/upload-artifact@v4
      with:
        name: mac-build
        path: |
          src/lapki-amd64
